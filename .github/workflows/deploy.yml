name: ISM Platform CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Frontend testing and building
  frontend:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run tests
      working-directory: ./frontend
      run: npm run test:coverage

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Backend testing and building
  backend:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run linting
      working-directory: ./backend
      run: npm run lint

    - name: Run tests
      working-directory: ./backend
      run: npm test

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # AI Services testing and building
  ai-services:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: ai_service_flask/requirements.txt

    - name: Install dependencies
      working-directory: ./ai_service_flask
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run linting
      working-directory: ./ai_service_flask
      run: |
        pip install flake8 black isort
        flake8 .
        black --check .
        isort --check-only .

    - name: Run tests
      working-directory: ./ai_service_flask
      run: |
        pip install pytest pytest-cov
        pytest --cov=. --cov-report=xml

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./ai_service_flask
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-services:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration testing
  integration-test:
    runs-on: ubuntu-latest
    needs: [frontend, backend, ai-services]
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run integration tests
      working-directory: ./backend
      env:
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        NODE_ENV: test
      run: npm run test:integration

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|ism-frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}|g" k8s/frontend-deployment.yaml
        sed -i "s|ism-backend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}|g" k8s/backend-deployment.yaml
        sed -i "s|ism-ai-services:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-services:${{ github.sha }}|g" k8s/ai-services-deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/redis-deployment.yaml
        kubectl apply -f k8s/backend-deployment.yaml
        kubectl apply -f k8s/frontend-deployment.yaml
        kubectl apply -f k8s/ai-services-deployment.yaml
        kubectl apply -f k8s/ingress.yaml

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/ism-frontend -n ism-platform --timeout=300s
        kubectl rollout status deployment/ism-backend -n ism-platform --timeout=300s
        kubectl rollout status deployment/ism-ai-services -n ism-platform --timeout=300s

    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        sleep 30
        
        # Test health endpoints
        kubectl run test-pod --image=curlimages/curl -n ism-platform --rm -i --restart=Never -- \
          curl -f http://ism-frontend/health
        kubectl run test-pod --image=curlimages/curl -n ism-platform --rm -i --restart=Never -- \
          curl -f http://ism-backend/api/health
        kubectl run test-pod --image=curlimages/curl -n ism-platform --rm -i --restart=Never -- \
          curl -f http://ism-ai-services/health

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to production
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|ism-frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}|g" k8s/frontend-deployment.yaml
        sed -i "s|ism-backend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}|g" k8s/backend-deployment.yaml
        sed -i "s|ism-ai-services:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-services:${{ github.sha }}|g" k8s/ai-services-deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/redis-deployment.yaml
        kubectl apply -f k8s/backend-deployment.yaml
        kubectl apply -f k8s/frontend-deployment.yaml
        kubectl apply -f k8s/ai-services-deployment.yaml
        kubectl apply -f k8s/ingress.yaml

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/ism-frontend -n ism-platform --timeout=300s
        kubectl rollout status deployment/ism-backend -n ism-platform --timeout=300s
        kubectl rollout status deployment/ism-ai-services -n ism-platform --timeout=300s

    - name: Run production tests
      run: |
        # Wait for services to be ready
        sleep 60
        
        # Test production endpoints
        kubectl run test-pod --image=curlimages/curl -n ism-platform --rm -i --restart=Never -- \
          curl -f https://ism.yourdomain.com/health
        kubectl run test-pod --image=curlimages/curl -n ism-platform --rm -i --restart=Never -- \
          curl -f https://api.ism.yourdomain.com/api/health

    - name: Notify deployment success
      if: success()
      run: |
        echo "🚀 Production deployment successful!"
        echo "Frontend: https://ism.yourdomain.com"
        echo "API: https://api.ism.yourdomain.com"
        echo "Monitoring: https://grafana.ism.yourdomain.com"

  # Rollback on failure
  rollback:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure()
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Rollback deployment
      run: |
        kubectl rollout undo deployment/ism-frontend -n ism-platform
        kubectl rollout undo deployment/ism-backend -n ism-platform
        kubectl rollout undo deployment/ism-ai-services -n ism-platform
        
        kubectl rollout status deployment/ism-frontend -n ism-platform --timeout=300s
        kubectl rollout status deployment/ism-backend -n ism-platform --timeout=300s
        kubectl rollout status deployment/ism-ai-services -n ism-platform --timeout=300s

    - name: Notify rollback
      run: |
        echo "⚠️ Production deployment failed, rolled back to previous version" 